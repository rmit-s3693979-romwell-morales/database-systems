import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;

public class dbload {
	
	DataOutputStream dataOutput;

	public static void main(String[] args) throws IOException {
		if (args.length < 2) {
            System.out.println("Please provide pagesize and datafile");
            System.exit(0);
        }
		//declare variables from command line inputs
		int pageSize = Integer.parseInt(args[0]);
        String inputFile = args[1];
        String outputFile = "heap."+args[0];
        
              
        List<propertyDetails> listProperty = readFromCsv(inputFile);
        dbload load = new dbload(outputFile);
  
//        byte[] buffer = new byte[pageSize];
        
        
        long startTime = System.nanoTime();
        //read all records from the listProperty list
        for (propertyDetails p:listProperty) {
        	load.writeProperty(p);        	
        }
        long endTime = System.nanoTime();
        long timeElapsed = endTime - startTime;
        int numberOfPage = listProperty.size()/(pageSize/500);
        System.out.println("Number of records loaded: "+listProperty.size());
        System.out.println("Number of pages used: "+numberOfPage);
        System.out.println("Execution time in milliseconds : " + timeElapsed / 1000000);
        
	}	
    	
    private static List<propertyDetails> readFromCsv(String filename) throws IOException{
    	//create a list of propertyDetails object from the CSV file
        List<propertyDetails> listProperty = new ArrayList<>();
        Path pathToFile = Paths.get(filename);
        BufferedReader br = Files.newBufferedReader(pathToFile, StandardCharsets.US_ASCII);
        //skip header
        br.readLine();
        //read first line
        String line = br.readLine();
        //loop through all the lines
        while(line!=null) {
        	//split the lines into different fields
        	String [] fields = line.split(",(?=([^\"]|\"[^\"]*\")*$)",-1);
        	propertyDetails pD = createProperty(fields);
        	//add object into array list
        	listProperty.add(pD);
        	//read next line
        	line = br.readLine();
        }
        return listProperty;
    }
        
    private static propertyDetails createProperty(String[] column) {
    	//catch and replace null values
    	int censusYear=0;
    	int blockId=0;
    	int propertyId=0;
    	int basePropertyId=0;
    	int constructionYear=0;
    	int refurbishedYear=0;
    	int buildingHeightHighestFloor=0;
    	int accessibilityRating=0;
    	int bicycleSpaces=0;
    	float xCoordinate=0;
    	float yCoordinate=0;
    	
		if (!column[0].isEmpty()) {
			censusYear = Integer.parseInt(column[0]);
		}
		if (!column[1].isEmpty()) {
			blockId = Integer.parseInt(column[1]);
		}
		if (!column[2].isEmpty()) {
			propertyId = Integer.parseInt(column[2]);
		}
		if (!column[3].isEmpty()) {
			basePropertyId = Integer.parseInt(column[3]);
		}
    	String buildingName = column[4];
    	String streetAddress = column[5];
    	String suburb = column[6];
		if (!column[7].isEmpty()) {
			constructionYear = Integer.parseInt(column[7]);
		}
		if (!column[8].isEmpty()) {
			refurbishedYear = Integer.parseInt(column[8]);
		}
		if (!column[9].isEmpty()) {
			buildingHeightHighestFloor = Integer.parseInt(column[9]);
		}
    	String predominantSpaceUse = column[10];
    	String accessibilityType = column[11];
    	String accessibilityTypeDescription = column[12];
		if (!column[13].isEmpty()) {
			accessibilityRating = Integer.parseInt(column[13]);
		}
		if (!column[14].isEmpty()) {
			bicycleSpaces = Integer.parseInt(column[14]);
		}
    	String hasShowers = column[15];
		if (!column[16].isEmpty()) {
			xCoordinate = Float.parseFloat(column[16]);
		}
		if (!column[17].isEmpty()) {
			yCoordinate = Float.parseFloat(column[17]);
		}
    	String location = column[18];
    	
    	return new propertyDetails ( censusYear,  blockId,  propertyId,  basePropertyId,  buildingName,
    			 streetAddress,  suburb,  constructionYear,  refurbishedYear,
    			 buildingHeightHighestFloor,  predominantSpaceUse,  accessibilityType,
    			 accessibilityTypeDescription,  accessibilityRating,  bicycleSpaces,  hasShowers,
    			 xCoordinate,  yCoordinate, location);
    }
    
    public dbload(String outputFile) throws IOException {
        dataOutput = new DataOutputStream(new FileOutputStream(outputFile));
    }

	private void writeProperty(propertyDetails p) throws IOException {
		  dataOutput.writeInt(p.getCensusYear());
		  dataOutput.writeInt(p.getBlockId());
		  dataOutput.writeInt(p.getPropertyId());
		  dataOutput.writeInt(p.getBasePropertyId());
		  dataOutput.writeUTF(p.getBuildingName());
		  dataOutput.writeUTF(p.getStreetAddress());
		  dataOutput.writeUTF(p.getSuburb());
		  dataOutput.writeInt(p.getConstructionYear());
		  dataOutput.writeInt(p.getRefurbishedYear());
		  dataOutput.writeInt(p.getBuildingHeightHighestFloor());
		  dataOutput.writeUTF(p.getPredominantSpaceUse());
		  dataOutput.writeUTF(p.getAccessibilityType());
		  dataOutput.writeUTF(p.getAccessibilityTypeDescription());
		  dataOutput.writeInt(p.getAccessibilityRating());
		  dataOutput.writeInt(p.getBicycleSpaces());
		  dataOutput.writeUTF(p.getHasShowers());
		  dataOutput.writeFloat(p.getxCoordinate());
		  dataOutput.writeFloat(p.getyCoordinate());
		  dataOutput.writeUTF(p.getLocation());
	}

}
